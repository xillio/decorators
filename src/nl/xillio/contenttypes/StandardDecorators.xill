/*
Author: Marijn van der Zaag, Xillio
Last updated: 18-02-2016

Description:
This robot saves all standard decorators to the cache, after which you can
create content types with them.

Usage: include the robot and call:
	var standardDecorators = getStandardDecorators();
After that, you can use it to save a content type. For instance:
	ContentType.save("file",[standardDecorators.file,standardDecorators.hash]);
	
Make sure you do not use standard decorator names for custom decorators.
*/
use ContentType, System, Collection;


// Returns an object with all standard decorators with their names as keys
function getStandardDecorators() {
    var decoratorDefinitions = getDecoratorDefinitions();
    var decorators = {};
    foreach(name,definition in decoratorDefinitions) {
    	decorators[name] = newDecorator(name,definition);
    }
    return decorators;
}

// Returns a decorator with the given name and definition
private function newDecorator(name,definition) {
	ContentType.decorator(name,definition);
	return name;
}

// Returns an object with all standard decorator definitions
private function getDecoratorDefinitions() {
    var decorators = {
		"file" : {
		     "fullName" : {
		          "type": "STRING",
		          "required" : true
		     },
		     "name" : {
		          "type": "STRING",
		          "required" : true
		     },
		     "extension" : {
		          "type": "STRING",
		          "required": true
		     },
		     "path" : {
		          "type" : "STRING",
		          "required" : true
		     },
		     "size": {
		          "type" : "NUMBER",
		          "required": true
		     }
		},
		"hash" : {
		     "md5" : {
		          "type" : "STRING",
		          "required": true
		     }
		},
		"mimeType" : {
		     "type" : {
		          "type" : "STRING",
		          "required" : true
		     }
		},
		"document" : {
		    "title" : {
		          "type" : "STRING",
		          "required" : true
		     },
		     "author" : {
		          "type" : "STRING",
		          "required" : true
		     }
		},
		"modified" : {
		     "date" : {
		          "type" : "DATE",
		          "required" : true
		     },
		     "by" : {
		          "type" : "STRING",
		          "required" : false
		     }
		},
		"created" : {
		     "date" : {
		          "type" : "DATE",
		          "required" : true,
		     },
		     "by" : {
		          "type" : "STRING",
		         
		          "required" : false,
		     }
		},
		"parent" : {
		     "id" : {
		          "type" : "STRING",
		          "required" : true
		     },
		     "path" : {
		          "type" : "STRING",
		          "required" : true
		     }
		},
		"folder" : {
		     "name": {
		          "type": "STRING",
		          "required": true
		     },
		     "path" : {
		         "type": "STRING",
		          "required": true
		     }
		},
		"folderStatistics" : {
		      "folderCount" : {
		          "type" : "NUMBER",
		          "required" : true
		     },
		     "fileCount" : {
		          "type" : "NUMBER",
		          "required" : true
		     }
		},
		"permissions" : {
		    "users" : {
		        "type" : "LIST",
		        "required" : true
		    },
		       
		    "groups" : {
		        "type" : "LIST",
		        "required" : true
		    }
		},
		"audit" : {
		    "events" : {
		        "type" : "LIST",
		        "required" : true
		    }
	    }
	};
    return decorators;
}